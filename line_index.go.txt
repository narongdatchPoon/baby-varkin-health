package handler

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/line/line-bot-sdk-go/v8/linebot/messaging_api"
)

func Handler(w http.ResponseWriter, r *http.Request) {
	// fmt.Fprintf(w, "<h1>Hello from Go! POST</h1>")
	channelSecret := os.Getenv("LINE_CHANNEL_SECRET")
	bot, err := messaging_api.NewMessagingApiAPI(
		os.Getenv("LINE_CHANNEL_TOKEN"),
	)
	if err != nil {
		log.Fatal(err)
	}

	cb, err := webhook.ParseRequest(channelSecret, r.Response.Request)
	if err != nil {
		log.Printf("Cannot parse request: %+v\n", err)
		if errors.Is(err, webhook.ErrInvalidSignature) {
			log.Println("/WriteHeader 400")
		} else {
			log.Println("/WriteHeader 500")
		}
		return
	}
	for _, event := range cb.Events {
		switch e := event.(type) {
		case webhook.MessageEvent:
			switch message := e.Message.(type) {
			case webhook.TextMessageContent:
				_, err := ReplyMessage(bot, e.ReplyToken, message.Text)
				if err != nil {
					log.Print("err")
				} else {
					log.Println("Sent text reply.")
				}

			default:
				log.Printf("Unsupported message content: %T\n", e.Message)
			}
		default:
			log.Printf("Unsupported message: %T\n", event)
		}
	}

}

func ReplyMessage(bot *messaging_api.MessagingApiAPI, replyToken string, message string) (*messaging_api.ReplyMessageResponse, error) {
	replyMessageResponse, err := bot.ReplyMessage(
		&messaging_api.ReplyMessageRequest{
			ReplyToken: replyToken,
			Messages: []messaging_api.MessageInterface{
				messaging_api.TextMessage{
					Text: message,
				},
			},
		})
	return replyMessageResponse, err
}

func Main() {
	r := mux.NewRouter()
	r.HandleFunc("/", Handler).Methods("POST")

}
